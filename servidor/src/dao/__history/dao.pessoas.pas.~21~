unit dao.pessoas;

interface

uses
  model.interfaces, System.Generics.Collections, model.entity.pessoa,
  model.utils, FireDAC.Comp.Client, FireDAC.DApt, model.conexao, model.enums;

type
  TDAOPessoa<T: TPessoa> = class(TInterfacedObject, iDAO<T>)
  private
  public
    function Get(var aLista: TObjectList<T>): iDAO<T>;
    function Update(Value: T): T;
    function Insert(Value: T): Boolean;
    function Delete(Value: Int64): Boolean;
  end;

implementation

uses
  Data.DB;

{ TDAOPessoa<T> }

function TDAOPessoa<T>.Delete(Value: Int64): Boolean;
const
  vDeletePessoa = 'DELETE FROM public.pessoa ' + 'WHERE idpessoa=:idpessoa; ';
var
  vConexao: iConexao;
begin
  Result := False;
  vConexao := TConexao.New('PRINCIPAL');
  vConexao.conexao.StartTransaction;
  try
    vConexao.conexao.ExecSQL(vDeletePessoa, [Value],
      [ftLargeint]);

    vConexao.conexao.Commit;
    Result := True;
  except
    vConexao.conexao.Rollback;
  end;

end;

function TDAOPessoa<T>.Get(var aLista: TObjectList<T>): iDAO<T>;
var
  vQry: TFDQuery;
  vPessoa: TPessoa;
begin
  Result := Self;

  vQry := TFDQuery.Create(nil);
  try
    vQry.Connection := TConexao.New('PRINCIPAL').Conexao;
    vQry.SQL.Clear;
    vQry.SQL.Add
      ('SELECT p.idpessoa, p.flnatureza, p.dsdocumento, p.nmprimeiro, p.nmsegundo, p.dtregistro, ');
    vQry.SQL.Add
      ('e.idendereco, e.dscep, i.dsuf, i.nmcidade, i.nmbairro, i.nmlogradouro, i.dscomplemento ');
    vQry.SQL.Add('FROM PESSOA P  ');
    vQry.SQL.Add('join endereco e on e.idpessoa = p.idpessoa  ');
    vQry.SQL.Add
      ('LEFT join endereco_integracao i on i.idendereco = e.idendereco  ');
    vQry.Open;

    while not vQry.Eof do
    begin
      vPessoa := TPessoa.New;

      vPessoa.IdPessoa := vQry.FieldByName('idpessoa').AsLargeInt;
      vPessoa.FlNatureza := TNaturezaPessoa(vQry.FieldByName('flnatureza')
        .AsInteger);
      vPessoa.DsDocumento := vQry.FieldByName('dsdocumento').AsString;
      vPessoa.NmPrimeiro := vQry.FieldByName('nmprimeiro').AsString;
      vPessoa.NmSegundo := vQry.FieldByName('nmsegundo').AsString;
      vPessoa.DtRegistro := vQry.FieldByName('dtregistro').AsDateTime;
      vPessoa.endereco.IdEndereco := vQry.FieldByName('idendereco').AsLargeInt;
      vPessoa.endereco.DsCep := vQry.FieldByName('dscep').AsString;
      vPessoa.endereco.DsUF := vQry.FieldByName('dsuf').AsString;
      vPessoa.endereco.NmCidade := vQry.FieldByName('nmcidade').AsString;
      vPessoa.endereco.NmBairro := vQry.FieldByName('nmbairro').AsString;
      vPessoa.endereco.NmLogradouro := vQry.FieldByName('nmlogradouro')
        .AsString;
      vPessoa.endereco.DsComplemento :=
        vQry.FieldByName('dscomplemento').AsString;

      aLista.Add(vPessoa);

      vQry.Next;
    end;

  finally
    vQry.Free;
  end;

end;

function TDAOPessoa<T>.Insert(Value: T): Boolean;
const
  vInsertPessoa = 'with rows as ( ' +
                  'INSERT INTO public.pessoa ' +
                  '(flnatureza, dsdocumento, nmprimeiro, nmsegundo, dtregistro) ' +
                  'VALUES(:flnatureza, :dsdocumento, :nmprimeiro, :nmsegundo, :dtregistro) RETURNING idpessoa ' +
                  '), ' +
                  'ende as ( ' +
                  'INSERT INTO public.endereco ' +
                  '(idpessoa, dscep) ' +
                  'VALUES((SELECT idpessoa FROM ROWS), :dscep) RETURNING idendereco ' +
                  ') ' +
                  'INSERT INTO public.endereco_integracao ' +
                  '(idendereco) ' +
                  'VALUES((select idendereco from ende)); ';
var
  vIdPessoa: Int64;
  vConexao: iConexao;
begin
  Result := False;
  vConexao := TConexao.New('PRINCIPAL');
  vConexao.conexao.StartTransaction;
  try
    vConexao.conexao.ExecSQL(vInsertPessoa,
      [Value.FlNatureza, Value.DsDocumento, Value.NmPrimeiro, Value.NmSegundo,
      Value.DtRegistro, Value.endereco.DsCep],
      [ftSmallint, ftString, ftString, ftString, ftDate, ftString]);
    vConexao.conexao.Commit;
    Result := True;
  except
    vConexao.conexao.Rollback;
  end;

  //AtualizarEnderecos;

end;

function TDAOPessoa<T>.Update(Value: T): T;
const
  vUpdatePessoa = 'UPDATE public.pessoa ' +
    'SET flnatureza=:flnatureza, dsdocumento=:dsdocumento, nmprimeiro=:nmprimeiro, nmsegundo=:nmsegundo, dtregistro=:dtregistro '
    + 'WHERE idpessoa=:idpessoa; ';
  vUpdateEndereco = 'UPDATE public.endereco ' + 'SET dscep=:dscep ' +
    'WHERE idendereco=:idendereco; ';
var
  vConexao: iConexao;
begin
  vConexao := TConexao.New('PRINCIPAL');
  vConexao.conexao.StartTransaction;
  try
    vConexao.conexao.ExecSQL(vUpdatePessoa,
      [Value.FlNatureza, Value.DsDocumento, Value.NmPrimeiro, Value.NmSegundo,
      Value.DtRegistro, Value.IdPessoa],
      [ftSmallint, ftString, ftString, ftString, ftDate, ftLargeint]);

    vConexao.conexao.ExecSQL(vUpdateEndereco,
      [Value.endereco.DsCep, Value.endereco.IdEndereco],
      [ftString, ftLargeint]);
    vConexao.conexao.Commit;
  except
    vConexao.conexao.Rollback;
  end;

  //AtualizarEnderecos;

  Result := Value;
end;

end.
